name: 'Release to staging'
description: 'Release to staging'

inputs:
  short-sha:
    description: 'Github short SHA'
  environment:
    description: 'Environment to deploy to'
    required: false
    default: 'stage'

runs:
  using: "composite"
  steps:
    - name: Install yq
      shell: bash
      env:
        YQ_VERSION: 3.4.1
      run: |
        sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/$YQ_VERSION/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
    - name: Update image with yq and push commit
      shell: bash
      run: |
        # never allow this action to manipulate prod.yaml
        if [ "${{ inputs.environment }}" == "prod" ]
        then
          exit 1
        fi
        if [ -z "${{ github.event.pull_request.number }}" ]
        then
          TAG=$(basename ${GITHUB_REF})
        else
          TAG=PR-${{ github.event.pull_request.number }}
        fi

        if [ -z "${{ inputs.short-sha }}" ]
        then
          SHA=$(echo $GITHUB_SHA | cut -c 1-7)
        else
          SHA=${{ inputs.short-sha }}
        fi

        # modify the values file for each environment
        ENVIRONMENTS=$(echo ${{ inputs.environment }} | tr -d "[:blank:]")
        for i in ${ENVIRONMENTS//,/ }
        do
          VALUES_FILE="${{ github.event.repository.name }}/values/$i.yaml"
          VERSION="${TAG}-${SHA}"

          [ -f $VALUES_FILE ] || ( echo "$VALUES_FILE does not exist. Is the service configured to be deployed with Argo CD?"; exit 1 )

          IMAGE=$(yq r ${VALUES_FILE} "image" | sed "s/:.*$//")":${VERSION}"
          yq w --inplace ${VALUES_FILE} "image" ${IMAGE}
          yq w --inplace ${VALUES_FILE} "version" ${VERSION}
        done

        git config --global user.email ${{ github.event.head_commit.author.email }}
        git config --global user.name ${{github.event.head_commit.author.name}}
        git commit -am "Set image for deploy"
        git push
